<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Model Intelligence Metrics</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --background: #fafafa;
            --foreground: #171717;
            --card: #ffffff;
            --card-foreground: #171717;
            --popover: #ffffff;
            --popover-foreground: #171717;
            --primary: #0ea5e9;
            --primary-foreground: #f8fafc;
            --secondary: #f1f5f9;
            --secondary-foreground: #0f172a;
            --muted: #f1f5f9;
            --muted-foreground: #64748b;
            --accent: #f1f5f9;
            --accent-foreground: #0f172a;
            --destructive: #ef4444;
            --destructive-foreground: #f8fafc;
            --border: #e2e8f0;
            --input: #e2e8f0;
            --ring: #0ea5e9;
            --radius: 0.75rem;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
            background-color: var(--background);
            color: var(--foreground);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        h1 {
            font-size: 2.25rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 2rem;
            color: var(--foreground);
        }

        h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--foreground);
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .chart-wrapper {
            background: var(--card);
            padding: 1.5rem;
            border-radius: var(--radius);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            height: 300px;
        }

        .model-section {
            background: var(--card);
            padding: 1.5rem;
            border-radius: var(--radius);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            margin-bottom: 1.5rem;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        th {
            font-weight: 500;
            text-align: left;
            padding: 0.75rem 1rem;
            background-color: var(--muted);
            color: var(--muted-foreground);
            font-size: 0.875rem;
            border-bottom: 1px solid var(--border);
        }

        td {
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            border-bottom: 1px solid var(--border);
        }

        tr:last-child td {
            border-bottom: none;
        }

        tr:hover {
            background-color: var(--muted);
        }

        .score { 
            color: #22c55e;
            font-weight: 500;
        }
        
        .latency { 
            color: #ef4444;
            font-weight: 500;
        }
        
        .token-rate { 
            color: var(--primary);
            font-weight: 500;
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 0.5rem;
            }
            
            .chart-wrapper {
                min-height: 250px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Model Intelligence Metrics</h1>

        <div class="charts-container">
            <div class="chart-wrapper">
                <canvas id="scoreChart"></canvas>
            </div>
            <div class="chart-wrapper">
                <canvas id="latencyChart"></canvas>
            </div>
            <div class="chart-wrapper">
                <canvas id="tokenRateChart"></canvas>
            </div>
        </div>
        
        <div class="model-section">
            <h2>Proprietary Models</h2>
            <table>
                <tr>
                    <th>Model</th>
                    <th>Score</th>
                    <th>First Token Latency</th>
                    <th>Token Output Rate</th>
                    <th>Function Call Support</th>
                </tr>
                {% for model in proprietary_models %}
                <tr>
                    <td>{{ model.name }}</td>
                    <td class="score">{{ model.score }}%</td>
                    <td class="latency">{{ model.first_token_latency }}</td>
                    <td class="token-rate">{{ model.token_rate }}</td>
                    <td>{{ model.function_call_support }}</td>
                </tr>
                {% endfor %}
            </table>
        </div>

        <div class="model-section">
            <h2>Open Source Models</h2>
            <table>
                <tr>
                    <th>Model</th>
                    <th>Score</th>
                    <th>First Token Latency</th>
                    <th>Token Output Rate</th>
                    <th>Function Call Support</th>
                </tr>
                {% for model in open_source_models %}
                <tr>
                    <td>{{ model.name }}</td>
                    <td class="score">{{ model.score }}%</td>
                    <td class="latency">{{ model.first_token_latency }}</td>
                    <td class="token-rate">{{ model.token_rate }}</td>
                    <td>{{ model.function_call_support }}</td>
                </tr>
                {% endfor %}
            </table>
        </div>
    </div>

    <script>
        const proprietary_models = {{ proprietary_models | tojson }};
        const opensource_models = {{ open_source_models | tojson }};
        const allModels = [...proprietary_models, ...opensource_models];
        
        const modelNames = allModels.map(m => m.name);
        const scores = allModels.map(m => parseFloat(m.score));
        const latencies = allModels.map(m => parseFloat(m.first_token_latency));
        const tokenRates = allModels.map(m => parseFloat(m.token_rate));

        const chartConfig = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    padding: 12,
                    cornerRadius: 8
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(0, 0, 0, 0.1)',
                    }
                },
                x: {
                    grid: {
                        display: false
                    }
                }
            }
        };

        new Chart(document.getElementById('scoreChart'), {
            type: 'bar',
            data: {
                labels: modelNames,
                datasets: [{
                    label: 'Model Score (%)',
                    data: scores,
                    backgroundColor: '#22c55e',
                    borderRadius: 6
                }]
            },
            options: {
                ...chartConfig,
                plugins: {
                    ...chartConfig.plugins,
                    title: {
                        display: true,
                        text: 'Model Scores',
                        padding: {
                            bottom: 20
                        }
                    }
                }
            }
        });

        new Chart(document.getElementById('latencyChart'), {
            type: 'bar',
            data: {
                labels: modelNames,
                datasets: [{
                    label: 'First Token Latency (ms)',
                    data: latencies,
                    backgroundColor: '#ef4444',
                    borderRadius: 6
                }]
            },
            options: {
                ...chartConfig,
                plugins: {
                    ...chartConfig.plugins,
                    title: {
                        display: true,
                        text: 'First Token Latency',
                        padding: {
                            bottom: 20
                        }
                    }
                }
            }
        });

        new Chart(document.getElementById('tokenRateChart'), {
            type: 'bar',
            data: {
                labels: modelNames,
                datasets: [{
                    label: 'Token Output Rate (tokens/sec)',
                    data: tokenRates,
                    backgroundColor: '#0ea5e9',
                    borderRadius: 6
                }]
            },
            options: {
                ...chartConfig,
                plugins: {
                    ...chartConfig.plugins,
                    title: {
                        display: true,
                        text: 'Token Output Rate',
                        padding: {
                            bottom: 20
                        }
                    }
                }
            }
        });
    </script>
</body>
</html> 